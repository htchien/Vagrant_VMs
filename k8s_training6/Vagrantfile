# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/jammy64"
  # config.vm.box_version ='20210924.0.0'
  config.vm.hostname = 'ted-k8s'
  config.vm.define vm_name = 'ted-k8s-vm'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network :private_network, ip: "172.17.8.112"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  config.vm.provider "virtualbox" do |vb|
    vb.cpus = "2"
    vb.memory = "2048"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    set -e -x -u
    export DEBIAN_FRONTEND=noninteractive

    # echo "================== Updating apt repository =================="
    sudo apt-get update

    # echo "================== Installing prerequisite components =================="
    sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release

    # echo "================== Installing Docker =================="
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-get update
    export DOCKER_VERSION="5:20.10.13~3-0~ubuntu-jammy"
    export CONTAINER_VERSION="1.5.10-1"
    sudo apt-get install -y docker-ce=$DOCKER_VERSION docker-ce-cli=$DOCKER_VERSION containerd.io=$CONTAINER_VERSION
    sudo apt-mark hold docker-ce docker-ce-cli containerd.io
    sudo usermod -aG docker $USER
    
    # echo "============== Set Cgroup driver to systemd ==============="
    sudo mkdir -p /etc/docker/
    sudo /bin/bash << 'SCRIPT'
cat << 'EOF' >> /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"]
}
EOF
SCRIPT

    # echo "================== Set IPv4 IP Forward ===================="
    sudo /bin/bash << 'SCRIPT'
cat << 'EOF' >> /etc/sysctl.conf
net.ipv4.ip_forward=1
EOF
SCRIPT
    sudo sysctl -p

    # echo "================== Enable Docker Engine ===================="
    sudo systemctl enable docker 
    sudo systemctl daemon-reload
    sudo systemctl restart docker

    # echo "================== Installing Kubernetes =================="
    sudo /bin/bash << 'SCRIPT'
cat << 'EOF' >>/etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
SCRIPT
    sudo sysctl --system
    
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://apt.kubernetes.io/ kubernetes-xenial main"
    sudo apt-get update
    export K8S_VERSION="1.23.6"
    sudo apt-get install -y kubeadm=${K8S_VERSION}-00 kubectl=${K8S_VERSION}-00 kubelet=${K8S_VERSION}-00
    sudo apt-mark hold kubeadm kubectl kubelet
    echo 'source <(kubectl completion bash)' >> ~/.bashrc

    # echo "================== Disable swap =================="
    # https://github.com/kubernetes/kubernetes/issues/53533
    sudo swapoff -a && sudo sysctl -w vm.swappiness=0
    sudo sed '/vagrant--vg-swap/d' -i /etc/fstab

    # echo "================== Start Kubernetes Cluster =================="
    # sudo kubeadm init
    sudo kubeadm init # --pod-network-cidr=192.168.0.0/16
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config

    # echo "================== Install Calico to handle network policy =================="
    kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    # echo "================== Untaint the master node so we can deploy workers for single node on VirtualBox VM =================="
    kubectl taint nodes --all node-role.kubernetes.io/master-

    # echo "================== Install Kubernetes Dashboard =================="
    # kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml

    # echo "================== Start dnsutils Pod =================="
    # kubectl apply -f /vagrant/dnsutils.yaml

    # echo "================== ted-k8s-t5 Provisioning Finished =================="
  SHELL
end
